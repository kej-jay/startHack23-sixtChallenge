from pathlib import Path
import random
from flask import Flask
from flask import Response
import data_processing
import data_handling
import json
import uuid

app = Flask(__name__)

@app.route("/")
def hello_world():
    return "<p>Hello, World!</p>"

@app.route("/stock")
def get_stock():
    response_list = []
    for i in range(10):
        r_company = data_processing.get_random_company()
        company_sector = data_processing.get_category_industry(r_company)
        company_popularity = data_processing.compute_popularity(r_company)
        company_stock_trend = data_processing.compute_half_year_trend(r_company)
        company_stock_risk = data_processing.get_risk(r_company)
        company_description = data_processing.get_short_description(data_processing.get_description(r_company), 30)

        company_dict = json.loads(r_company)
        company_name = company_dict[0]["name"]

        exchange_currency, session_dates_series, open_values_series, low_values_series, high_values_series, volume_values_series = data_handling.get_open_close_high_low_volume_lists(company_name)

        open_value_graph = data_handling.create_graph(
            session_dates_series,
            [open_values_series],
            "Opening market value over 1 year",
            company_name,
            exchange_currency,
            "Session dates",
            "Opening market price"
        )

        volatility_graph = data_handling.create_graph(
            session_dates_series,
            [low_values_series, high_values_series],
            "Price volatility over the last 2 weeks",
            company_name,
            exchange_currency,
            "Session dates",
            "Highest and Lowest market prices"
        )

        volume_values_graph = data_handling.create_graph(
            session_dates_series,
            [volume_values_series],
            "Volume of stock traded over 1 year",
            company_name,
            exchange_currency,
            "Session dates",
            "Volume traded"
        )

        temp_response_dict = {
            'id': str(uuid.uuid4()),
            'type': 'Stock',
            'name': company_name,
            'description': company_description,
            'risk': company_stock_risk,
            'trend': company_stock_trend,
            'popularity': company_popularity,
            'sector': company_sector,
            'graph1': open_value_graph,
            'graph2': volatility_graph,
            'graph3': volume_values_graph
        }
        response_list.append(temp_response_dict)

    return Response(json.dumps(response_list), mimetype='application/json')


@app.route("/quotes")
def quotes():
    with open(Path(__file__).parent.joinpath('data').joinpath('Quotes.txt')) as fq_in:
        all_quotes = fq_in.readlines()
    fq_in.close()

    all_quotes_response = []

    for quote_info in all_quotes:
        quote = quote_info.split("-")[0][:-2]
        quote_author = quote_info.split("-")[1].replace('\n', '')[1:] if quote_info.split("-")[1].replace('\n', '')[1:] != 'ChatGPT' else 'Chatty Gaperson'

        response = {
            'id': str(uuid.uuid1()),
            'type': 'Quote',
            'name': quote_author,
            'quote': quote,
            'isTrue': True if quote_author != 'Chatty Gaperson' else False,
            'description': 'Is this quote true or not?',
            'explanation': 'It was said by the author' if quote_author != 'Chatty Gaperson' else 'It was generated by ChatGPT and was further tampered with'
        }

        all_quotes_response.append(response)

    return Response(json.dumps(all_quotes_response), mimetype='application/json')


@app.route("/stock_info")
def stock_info():
    with open(Path(__file__).parent.joinpath('data').joinpath('Stock information.txt')) as fsi_in:
        all_info = fsi_in.readlines()
    fsi_in.close()

    all_info_response = []

    for info_piece in all_info:
        print(info_piece.split(": "))
        info_title = info_piece.split(": ")[0]
        info_description = info_piece.split(": ")[1]
        info_explanation = info_piece.split(": ")[2].replace('\n', '')

        response = {
            'id': str(uuid.uuid1()),
            'type': 'Info',
            'name': info_title,
            'description': info_description,
            'explanation': info_explanation
        }

        all_info_response.append(response)

    return Response(json.dumps(all_info_response), mimetype='application/json')


@app.route("/test")
def test():
    r_company = data_processing.get_random_company()
    desc = data_processing.get_description(r_company)

    return desc